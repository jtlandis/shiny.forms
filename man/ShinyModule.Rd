% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ShinyModule-.R
\name{ShinyModule}
\alias{ShinyModule}
\title{R6 Class that is the work horse of the shiny.forms
package}
\description{
R6 Class that is the work horse of the shiny.forms
package

R6 Class that is the work horse of the shiny.forms
package
}
\details{
This is to help modulize code in order to keep objects
self contained, but also convienent to read from.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{element id that is assigned by the user.
depending on how nested the module is, this may not be
the id represented on the DOM due to namespacing of
\link[shiny]{moduleServer}}

\item{\code{inner_id}}{an id that is used within \verb{$ui} that is
may be of some care for the user.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ShinyModule$new()}}
\item \href{#method-call}{\code{ShinyModule$call()}}
\item \href{#method-ui}{\code{ShinyModule$ui()}}
\item \href{#method-remove}{\code{ShinyModule$remove()}}
\item \href{#method-reactive}{\code{ShinyModule$reactive()}}
\item \href{#method-invalidate}{\code{ShinyModule$invalidate()}}
\item \href{#method-upgrade}{\code{ShinyModule$upgrade()}}
\item \href{#method-clone}{\code{ShinyModule$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a ShinyModule object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$new(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Set the value of \verb{$id} field}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-call"></a>}}
\if{latex}{\out{\hypertarget{method-call}{}}}
\subsection{Method \code{call()}}{
Call \link[shiny]{moduleServer} which inacts
this modules \code{private$server} function with
\verb{$id} as the namespace.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$call()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ui"></a>}}
\if{latex}{\out{\hypertarget{method-ui}{}}}
\subsection{Method \code{ui()}}{
generate the UI associated with this ShinyModule object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$ui(id = self$id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{the id to use as a namespace from \link[shiny]{NS}
defaults to \verb{$id} field.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove"></a>}}
\if{latex}{\out{\hypertarget{method-remove}{}}}
\subsection{Method \code{remove()}}{
Function to call to remove this ShinyModule's UI elements
and clean up the server side input elements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$remove(input, session)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-reactive"></a>}}
\if{latex}{\out{\hypertarget{method-reactive}{}}}
\subsection{Method \code{reactive()}}{
Function that when called, will create a reactive expression that
returns a reference to this ShinyModule Object. Calling this
function will enable reactivity on this object. This allows
users to set fields as normal values and have
more control over when a field should be updated.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$reactive()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-invalidate"></a>}}
\if{latex}{\out{\hypertarget{method-invalidate}{}}}
\subsection{Method \code{invalidate()}}{
Function used to invalidate the private reactive expression.
This should only be called if \verb{$reactive} has been called at
the top of the app.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$invalidate()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-upgrade"></a>}}
\if{latex}{\out{\hypertarget{method-upgrade}{}}}
\subsection{Method \code{upgrade()}}{
If an ShinyModule object is ever cached to disk,
and the corresponding package is updated with new
methods, this function is used to update that object
to a newer version if possible. This will call an
internal S3 function named upgrade
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$upgrade(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{additional arguments to be passed to the
internal S3 upgrade method. This exists for future
extensibility. For example}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ShinyModule$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
